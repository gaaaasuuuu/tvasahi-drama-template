---
const { class: className, html, onlyUse, ...rest } = Astro.props;
import '@styles/next-story.css';
---
<next-story
  class={[className]}
  data-html={html}
  data-only-use={onlyUse}
></next-story>

<script>
import deviceType from '@scripts/device-type.js';
const { device } = deviceType();
let htmlItems = [];
let elItems = [];

class NextStory extends HTMLElement {
  constructor() {
    super();
    const { onlyUse, html } = this.dataset;
    if (onlyUse && onlyUse !== device) return;
    htmlItems.push(html);
    elItems.push(this);
  }
}
customElements.define('next-story', NextStory);


htmlItems.forEach(async(htmlPath, i) => {
  const response = await fetch(htmlPath);
  const result = await response.text();
  // const dom = await new DOMParser().parseFromString(result, 'text/html');
  elItems[i].innerHTML = result;

  const videoThumb = elItems[i].querySelector('.video-thumb');
  const ytPlayer = elItems[i].querySelector('iframe');
  if (videoThumb) {
    videoThumb.addEventListener('click', (e) => {
      if (ytPlayer && ytPlayer.getAttribute('data-src')) {
        ytPlayer.setAttribute('src', ytPlayer.getAttribute('data-src'));
      }
    }, { once: true });
  }

  const hash = location.hash;
  if (hash === '#modal') {
    if (ytPlayer && ytPlayer.getAttribute('data-src')) {
      ytPlayer.setAttribute('src', ytPlayer.getAttribute('data-src'));
    }
  }

  const modal = elItems[i].querySelector('#modal');
  if (modal) {
    modal.addEventListener('click', (e) => {
      ytPlayer.contentWindow.postMessage('{"event":"command","func":"' + 'pauseVideo' + '","args":""}', '*');
      e.preventDefault();
      location.hash = e.target.hash;
      history.pushState({}, '', location.pathname);
    });
  }
});

async function fetchHTML(path) {
  return await fetch(path);
}
</script>
